@using Hl7.Fhir.Model;
@using Hl7.Fhir.Rest;
@using Hl7.Fhir.Serialization;
@using FHIRBlazor.Pages;
@using FHIRBlazor.CustomComponents.TypeHandlers;

@inject Radzen.DialogService dialogService
@inject NotificationService NotificationService
@inject NavigationManager NavManager


<ErrorBoundary>
	<ChildContent>
		<RadzenDataGrid Data="@results" TItem="MedicationStatement" PageSize="10" AllowPaging="true"
						AllowFiltering="true" AllowColumnResize="true" AllowSorting="true"
						PagerHorizontalAlign="HorizontalAlign.Center">
			<Columns>
				<RadzenDataGridColumn TItem="MedicationStatement" Property="Medication" Title="Medication" Filterable="false" Sortable="false">
					<Template Context="medstatement">
						@*This is to handle the two different datatypes for medication*@
						@if (medstatement.Medication.TypeName == "CodeableConcept")
						{
							var temp = (CodeableConcept)medstatement.Medication;
							<CodeableConceptHandler Data=temp/>
						}
						else
						{
							var temp = (ResourceReference)medstatement.Medication;

							@if (temp.Reference.StartsWith("Medication"))
							{
								@*Due to med reference, open dialogue to view medication specifically*@
								<RadzenButton ButtonStyle="ButtonStyle.Light" Style="font-size: 14px; background-color: transparent; text-align:left; " Class="" Text="View Medication" />
							}
							else
							{
								<a>@temp.Display</a>
							}
						}
					</Template>
				</RadzenDataGridColumn>
				<RadzenDataGridColumn TItem="MedicationStatement" Property="Dosage" Title="Dosage" Filterable="false" Sortable="false">
					<Template Context="medstatement">
						@if (medstatement.Dosage != null)
						{
							@foreach (var doseage in medstatement.Dosage)
							{
								@if (doseage.Text != null)
								{
									<a>@doseage.Text</a>
								}
							}
						}
					</Template>
				</RadzenDataGridColumn>
				<RadzenDataGridColumn TItem="MedicationStatement" Property="ReasonCode" Title="Reason" Filterable="false" Sortable="false">
					<Template Context="medstatement">
						@*Needs error handling*@
						@if (medstatement.ReasonCode != null)
						{
							@foreach (var reason in medstatement.ReasonCode)
							{
								@if (reason.Text != null)
								{
									<a>@reason.Text</a>
								}
							}
						}
					</Template>
				</RadzenDataGridColumn>
				<RadzenDataGridColumn TItem="MedicationStatement" Property="Id" Title="ID">
					<Template Context="medstatement"><a href="@($"{serverURL}/MedicationStatement/{medstatement.Id}")">@medstatement.Id</a></Template>
				</RadzenDataGridColumn>
			</Columns>
		</RadzenDataGrid>
	</ChildContent>
	<ErrorContent>
		<RadzenCard class="m-3">
			<h3 class="h5"><b>There was an error</b></h3>
		</RadzenCard>
	</ErrorContent>
</ErrorBoundary>


@code {
	[Parameter] public string PatientID { get; set; }
	private Bundle search = new Bundle();
	private Hl7.Fhir.Model.MedicationStatement[]? results;

	void ShowError(NotificationMessage message)
	{
		NotificationService.Notify(message);
		Console.WriteLine($"{message.Severity} notification");
	}
	private string errorMessage = "";

	private string serverURL = "http://hapi.fhir.org/baseR4";

	protected override void OnInitialized()
	{
		FhirClient client = new FhirClient(serverURL);

		//Medication Information
		var sParams = new SearchParams()
			.Where("subject=" + PatientID)
			.LimitTo(100);
		try
		{
			search = client.Search<MedicationStatement>(sParams);
			results = new MedicationStatement[search.Entry.Count];

			//for every search result
			for (int i = 0; i < search.Entry.Count; i++)
			{
				results[i] = (MedicationStatement)search.Entry[i].Resource;
			}
		}
		catch (Exception ex)
		{
			errorMessage = ex.Message;
			ShowError(new NotificationMessage
				{
					Style = "position: relative; top: 1%; left: 60%; transform: translate(-35%, 35%); width: 60%; max-width: 3000px;",
					Severity = NotificationSeverity.Error,
					Summary = "There has been an error",
					Detail = errorMessage,
					Duration = 40000
				}
			);
			Console.WriteLine("Error info:" + ex.Message);
		}


	}
}




