@using Hl7.Fhir.Model;
@using Hl7.Fhir.Rest;
@using Hl7.Fhir.Serialization;
@using FHIRBlazor.CustomComponents.TypeHandlers

@inject Radzen.DialogService dialogService
@inject NavigationManager NavManager

@*https://blazor.radzen.com/dialog*@

<div class="row mb-3">
	<div class="col-lg-6 d-flex ">
		<RadzenCard Style="width: 100%; overflow: hidden;">
			@*<h3 class="h5">Report Information</h3>*@
			<div class="d-flex flex-row">
				<div>
					<div>Report</div>
					<b><CodeableConceptHandler Data=report.Code /></b>
					<div class="mt-3">Subject</div>
					<b>@report.Subject.Reference</b>
				</div>
			</div>
		</RadzenCard>
	</div>
	<div class="col-lg-6 d-flex">
		<RadzenCard Style="width: 100%; overflow: hidden;">
			@*<h3 class="h5">Personal</h3>*@
			<div class="row">
				<div class="col">
					<div>Encounter</div>
					<b>@report.Encounter.Reference</b>
					<div class="mt-3">Date</div>
					<b>@report.Issued</b>
				</div>
			</div>
		</RadzenCard>
	</div>
</div>

@*Observation List*@
<div class="mb-3">
	<h3 class="h5 m-2">Observations</h3>
	<ErrorBoundary>
		<ChildContent>
			<RadzenDataGrid Data="@observations" TItem="Observation" PageSize="6" AllowPaging="true"
							AllowFiltering="true" AllowColumnResize="true" AllowSorting="true"
							PagerHorizontalAlign="HorizontalAlign.Center">
				<Columns>

					<RadzenDataGridColumn TItem="Observation" Width=60% Property="Code" Title="Code" Filterable="false" Sortable="false">
						<Template Context="observation">
							<CodeableConceptHandler Data=observation.Code />
						</Template>
					</RadzenDataGridColumn>

					<RadzenDataGridColumn TItem="Observation" Property="Category" Title="Category" Filterable="false" Sortable="false">
						<Template Context="observation">
							@foreach (var category in observation.Category)
							{
								<CodeableConceptHandler Data=category />
								<a> </a>
							}
						</Template>
					</RadzenDataGridColumn>

					@*Need to handle all versions of value https://www.hl7.org/fhir/observation.html*@
					@*<RadzenDataGridColumn TItem="Observation" Property="Value" Title="Value">
						<Template Context="observation"><CodeableConceptHandler Data=observation.Value/></Template>
					</RadzenDataGridColumn>*@

					<RadzenDataGridColumn TItem="Observation" Property="Issued" Title="IssueDate" Filterable="false" Sortable="false">
						<Template Context="observation">@observation.Issued</Template>
					</RadzenDataGridColumn>

					<RadzenDataGridColumn TItem="Observation" Property="Id" Title="ID">
						<Template Context="observation"><a href="@($"{serverURL}/Observation/{observation.Id}")">@observation.Id</a></Template>
					</RadzenDataGridColumn>
				</Columns>

			</RadzenDataGrid>
		</ChildContent>
		<ErrorContent>
			<RadzenCard class="m-3">
				<h3 class="h5"><b>There was an error</b></h3>
			</RadzenCard>
		</ErrorContent>
	</ErrorBoundary>
</div>

<div class="row">
	<div class="col-md-12 text-right">
		@*<RadzenButton Click="@(()=>NavManager.NavigateTo("/patientinfo/"+ReportID))" ButtonStyle="ButtonStyle.Secondary" Text="More Info" Style="width: 150px" />*@
		<RadzenButton Click="@((args) => dialogService.Close(true))" ButtonStyle="ButtonStyle.Primary" Text="Close" Style="width: 120px" />
	</div>
</div>

@code {
	[Parameter] public string ReportID { get; set; }
	private DiagnosticReport report;
	private Observation[]? observations;

	private string serverURL = "http://hapi.fhir.org/baseR4";

	protected override void OnInitialized()
	{
		FhirClient client = new FhirClient(serverURL);
		try
		{
			report = client.Read<DiagnosticReport>("DiagnosticReport/" + ReportID);

			observations = new Observation[report.Result.Count];

			for (int i = 0; i < report.Result.Count; i++)
			{
				observations[i] = client.Read<Observation>(report.Result[i].Reference);
			}
			Console.WriteLine("Observations found");

		}
		catch (Exception ex)
		{
			//errorMessage = ex.Message;
			//ShowError(new NotificationMessage
			//	{
			//		Style = "position: relative; top: 1%; left: 60%; transform: translate(-35%, 35%); width: 60%; max-width: 3000px;",
			//		Severity = NotificationSeverity.Error,
			//		Summary = "There has been an error",
			//		Detail = errorMessage,
			//		Duration = 40000
			//	}
			//);
			Console.WriteLine("Error info:");
		}
	}
}




