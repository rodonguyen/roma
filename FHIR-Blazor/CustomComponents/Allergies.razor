@using Hl7.Fhir.Model;
@using Hl7.Fhir.Rest;
@using Hl7.Fhir.Serialization;
@using FHIRBlazor.Pages;
@using FHIRBlazor.CustomComponents.TypeHandlers;

@inject Radzen.DialogService dialogService
@inject NotificationService NotificationService
@inject NavigationManager NavManager


<ErrorBoundary>
	<ChildContent>
		<RadzenDataGrid Data="@results" TItem="AllergyIntolerance" PageSize="10" AllowPaging="true"
						AllowFiltering="true" AllowColumnResize="true" AllowSorting="true"
						PagerHorizontalAlign="HorizontalAlign.Center">
			<Columns>
				<RadzenDataGridColumn TItem="AllergyIntolerance" Property="Reaction" Title="Substance" Filterable="false" Sortable="false">
					<Template Context="allergy">
						@if (allergy.Code != null)
						{
							<CodeableConceptHandler Data=allergy.Code />
						}
						else if (allergy.Reaction.Count > 0)
						{
							@if (allergy.Reaction.First().Substance != null)
							{
								<CodeableConceptHandler Data=allergy.Reaction.First().Substance />
							}
							else
							{
								<a></a>
							}
						}
						else
						{
							<a></a>
						}
					</Template>
				</RadzenDataGridColumn>
				<RadzenDataGridColumn TItem="AllergyIntolerance" Property="Reaction" Title="Reaction" Filterable="false" Sortable="false">
					<Template Context="allergy">
						@if (allergy.Reaction.Count > 0)
						{
							var count = allergy.Reaction.First().Manifestation.Count;
							var temp = 1;
							@foreach (var reaction in allergy.Reaction.First().Manifestation)
							{
								if (temp >= count)
								{
									<a>@reaction.Coding.First().Display</a>
								}
								else
								{
									<a>@reaction.Coding.First().Display, </a>
								}
								temp++;
							}
						}
						else
						{
							<a></a>
						}
					</Template>
				</RadzenDataGridColumn>
				<RadzenDataGridColumn TItem="AllergyIntolerance" Property="Criticality" Title="Criticality" Filterable="false" Sortable="false" />
				<RadzenDataGridColumn TItem="AllergyIntolerance" Property="Category" Title="Category" Filterable="false" Sortable="false">
					<Template Context="allergy">
						@if (allergy.Category.Count() > 0)
						{
							<a>@allergy.Category.First()</a>
						}
						else
						{
							<a></a>
						}
					</Template>
				</RadzenDataGridColumn>
				<RadzenDataGridColumn TItem="AllergyIntolerance" Property="Onset" Title="Onset Date" Filterable="false" Sortable="false">
					<Template Context="allergy">
						<DateHandler Data=allergy.Onset />
					</Template>
				</RadzenDataGridColumn>
				<RadzenDataGridColumn TItem="AllergyIntolerance" Property="Id" Title="ID">
					<Template Context="allergy"><a href="@($"{serverURL}/AllergyIntolerance/{allergy.Id}")">@allergy.Id</a></Template>
				</RadzenDataGridColumn>
			</Columns>
		</RadzenDataGrid>
	</ChildContent>
	<ErrorContent>
		<RadzenCard class="m-3">
			<h3 class="h5"><b>There was an error</b></h3>
		</RadzenCard>
	</ErrorContent>
</ErrorBoundary>


@code {
	[Parameter] public string PatientID { get; set; }
	private Bundle search = new Bundle();
	private Hl7.Fhir.Model.AllergyIntolerance[]? results;

	void ShowError(NotificationMessage message)
	{
		NotificationService.Notify(message);
		Console.WriteLine($"{message.Severity} notification");
	}
	private string errorMessage = "";

	private string serverURL = "http://hapi.fhir.org/baseR4";

	protected override void OnInitialized()
	{
		FhirClient client = new FhirClient(serverURL);

		//Allergy Information
		var q = new SearchParams()
			.Where("patient=" + PatientID)
			.LimitTo(100);

		try
		{
			search = client.Search<AllergyIntolerance>(q);
			results = new AllergyIntolerance[search.Entry.Count];

			//for every search result
			for (int i = 0; i < search.Entry.Count; i++)
			{
				//add patient to our list
				results[i] = (AllergyIntolerance)search.Entry[i].Resource;
			}
		}
		catch (Exception ex)
		{
			errorMessage = ex.Message;
			ShowError(new NotificationMessage
				{
					Style = "position: relative; top: 1%; left: 60%; transform: translate(-35%, 35%); width: 60%; max-width: 3000px;",
					Severity = NotificationSeverity.Error,
					Summary = "There has been an error",
					Detail = errorMessage,
					Duration = 40000
				}
			);
			Console.WriteLine("Error info:" + ex.Message);
		}



	}
}




