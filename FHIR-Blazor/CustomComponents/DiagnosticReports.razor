@using Hl7.Fhir.Model;
@using Hl7.Fhir.Rest;
@using Hl7.Fhir.Serialization;
@using FHIRBlazor.Pages;
@using FHIRBlazor.CustomComponents.TypeHandlers

@inject DialogService DialogService
@inject NotificationService NotificationService
@inject NavigationManager NavManager


<ErrorBoundary>
	<ChildContent>
		<RadzenDataGrid Data="@results" TItem="DiagnosticReport" PageSize="10" AllowPaging="true"
						AllowFiltering="true" AllowColumnResize="true" AllowSorting="true"
						PagerHorizontalAlign="HorizontalAlign.Center">
			<Columns>
				<RadzenDataGridColumn TItem="DiagnosticReport" Width=60% Property=Code Title="Report" Filterable="false" Sortable="false">
					<Template Context="report">
						<CodeableConceptHandler Data=report.Code />
					</Template>
				</RadzenDataGridColumn>

				<RadzenDataGridColumn TItem="DiagnosticReport" Property="Category" Title="Category" Filterable="false" Sortable="false">
					<Template Context="report">
						@foreach (var category in report.Category)
						{
							<CodeableConceptHandler Data=category />
							<a> </a>
						}
					</Template>
				</RadzenDataGridColumn>

				<RadzenDataGridColumn TItem="DiagnosticReport" Property="Id" Title="ID">
					<Template Context="report"><a href="@($"{serverURL}/DiagnosticReport/{report.Id}")">@report.Id</a></Template>
				</RadzenDataGridColumn>

				<RadzenDataGridColumn TItem="DiagnosticReport" Width=60px Property="Id" Title="View"  Filterable="false" Sortable="false">
					<Template Context="report">
						<RadzenButton Icon="open_in_new" ButtonStyle="ButtonStyle.Light" Click=@(() => OpenReport(report.Id)) />
					</Template>
				</RadzenDataGridColumn>
			</Columns>
		</RadzenDataGrid>
	</ChildContent>
	<ErrorContent>
		<RadzenCard class="m-3">
			<h3 class="h5"><b>There was an error</b></h3>
		</RadzenCard>
	</ErrorContent>
</ErrorBoundary>


@code {
	public async System.Threading.Tasks.Task OpenReport(string reportID)
	{
		await DialogService.OpenAsync<ViewReport>($"Report {reportID}",
				new Dictionary<string, object>() { { "ReportID", reportID } },
				new DialogOptions
					{
						Width = "1200px",
						Height = "700px",
						Resizable = true,
						Draggable = true,
						CloseDialogOnOverlayClick = true,
						CloseDialogOnEsc = true,
						Style = "color: #e2e8f0"
					});
	}

	[Parameter] public string PatientID { get; set; }
	private Bundle search = new Bundle();
	private Hl7.Fhir.Model.DiagnosticReport[]? results;

	void ShowError(NotificationMessage message)
	{
		NotificationService.Notify(message);
		Console.WriteLine($"{message.Severity} notification");
	}
	private string errorMessage = "";

	private string serverURL = "http://hapi.fhir.org/baseR4";

	protected override void OnInitialized()
	{
		FhirClient client = new FhirClient(serverURL);

		//Medication Information
		var sParams = new SearchParams()
			.Where("patient=" + PatientID)
			.LimitTo(100);
		try
		{
			search = client.Search<DiagnosticReport>(sParams);
			results = new DiagnosticReport[search.Entry.Count];

			//for every search result
			for (int i = 0; i < search.Entry.Count; i++)
			{
				results[i] = (DiagnosticReport)search.Entry[i].Resource;
			}
		}
		catch (Exception ex)
		{
			errorMessage = ex.Message;
			ShowError(new NotificationMessage
				{
					Style = "position: relative; top: 1%; left: 60%; transform: translate(-35%, 35%); width: 60%; max-width: 3000px;",
					Severity = NotificationSeverity.Error,
					Summary = "There has been an error",
					Detail = errorMessage,
					Duration = 40000
				}
			);
			Console.WriteLine("Error info:" + ex.Message);
		}
	}
}




