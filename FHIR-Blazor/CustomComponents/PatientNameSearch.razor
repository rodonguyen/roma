@using Hl7.Fhir.Model;
@using Hl7.Fhir.Rest;
@using Hl7.Fhir.Serialization;
@using FHIRBlazor.Pages;

@inject NotificationService NotificationService
@inject DialogService DialogService


<div class="my-3">
	<h1 class="text-center font-bold text-4xl">Patient Name Search</h1>
</div>

<form class="flex items-center my-3" onsubmit=@NameSearch>
	<label for="simple-search" class="sr-only">Search</label>
	<div class="relative w-full">
		<div class="flex absolute inset-y-0 left-0 items-center pl-3 pointer-events-none">
			<svg aria-hidden="true" class="w-5 h-5 text-gray-500 dark:text-gray-400" fill="currentColor"
				 viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
				<path fill-rule="evenodd"
					  d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z"
					  clip-rule="evenodd"></path>
			</svg>
		</div>
		<input type="text" @bind-value=inputPatientName id="simple-search"
			   class=" borderless bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full pl-10 p-2.5  dark:bg-zinc-800 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
			   placeholder="Search">
	</div>
	<button type="submit" class="borderless p-2.5 ml-2 text-sm font-medium text-white bg-blue-700 rounded-lg border border-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-grey-800">
		<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24"
			 xmlns="http://www.w3.org/2000/svg">
			<path stroke-linecap="round" stroke-linejoin="round"
				  stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
		</svg>

		<span class="sr-only">Search</span>
	</button>


</form>

<RadzenDataGrid Data="@searchResults" TItem="Patient" PageSize="10" AllowPaging="true"
				AllowFiltering="true" AllowColumnResize="true" AllowSorting="true"
				PagerHorizontalAlign="HorizontalAlign.Center">
	<Columns>
		<RadzenDataGridColumn TItem="Patient" Property="Name[0].Family" Title="Name">
			<Template Context="patient">
				@*<a href="@()">@patient.Name[0].ToString()</a>*@
				<RadzenButton ButtonStyle="ButtonStyle.Light" Style="font-size: 14px; background-color: transparent; text-align:left; " Class="" Click=@(() => OpenOrder(patient.Id)) Text="@(patient.Name[0].ToString())" />
			</Template>
		</RadzenDataGridColumn>
		<RadzenDataGridColumn TItem="Patient" Property="Gender" Title="Gender" />
		<RadzenDataGridColumn TItem="Patient" Property="BirthDate" Title="Birth Date" />
		<RadzenDataGridColumn TItem="Patient" Property="Id" Title="ID">
			<Template Context="patient"><a href="@($"{serverURL}/Patient/{patient.Id}")">@patient.Id</a></Template>
		</RadzenDataGridColumn>
	</Columns>
</RadzenDataGrid>


<div class="w-1/6 mt-3 relative right-0 ">
	<label for="small-input" class="block mb-2 text-sm font-bold text-gray-900 dark:text-gray-300">Max number of results</label>
	<input type="number" max=50 min=5 @bind-value=maxNumOfEntries id="small-input" class="borderless block p-2 w-full text-gray-900 bg-gray-50 rounded-lg border border-gray-300 sm:text-xs focus:ring-blue-500 focus:border-blue-500 dark:bg-zinc-800 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500">
</div>


@code {
	public async System.Threading.Tasks.Task OpenOrder(string patientID)
	{
		await DialogService.OpenAsync<PatientQuickInfo>($"Patient {patientID}",
				new Dictionary<string, object>() { { "PatientID", patientID } },
				new DialogOptions
					{
						Width = "700px",
						Height = "380px",
						Resizable = true,
						Draggable = true,
						CloseDialogOnOverlayClick = true,
						CloseDialogOnEsc = true,
						Style = "color: #e2e8f0"
					});
	}



	//error notification
	void ShowError(NotificationMessage message)
	{
		NotificationService.Notify(message);
		Console.WriteLine($"{message.Severity} notification");
	}

	//input variables
	private string inputPatientName = "";
	private int maxNumOfEntries = 30;
	private string errorMessage = "";

	//stores all the results
	private Hl7.Fhir.Model.Patient[]? searchResults;
	Bundle results = new Bundle();

	private string serverURL = "http://hapi.fhir.org/baseR4";

	//alternate servers:
	// https://r4.test.pyrohealth.net/fhir
	// http://hapi.fhir.org/baseR4
	// https://server.fire.ly

	void NameSearch()
	{
		Console.WriteLine("Searching");

		//connecting to the server
		var client = new FhirClient(serverURL);

		//Defining search paramaters, not sure where to find documentation on these params.
		var q = new SearchParams()
				.Where("given=" + inputPatientName)
				//.OrderBy("birthdate", SortOrder.Descending)
				//.SummaryOnly().Include("Patient:organization")
				.LimitTo(maxNumOfEntries);

		//HAPI returns a Bundle when searching (i assume other servers do the same)
		try
		{
			Bundle results = client.Search<Patient>(q);
			searchResults = new Patient[results.Entry.Count];

			//for every search result
			for (int i = 0; i < results.Entry.Count; i++)
			{
				//add patient to our list
				searchResults[i] = (Patient)results.Entry[i].Resource;
			}
			Console.WriteLine("Results Found");
		}
		catch (Exception ex)
		{
			errorMessage = ex.Message;
			ShowError(new NotificationMessage
				{
					Style = "position: relative; top: 1%; left: 60%; transform: translate(-35%, 35%); width: 60%; max-width: 3000px;",
					Severity = NotificationSeverity.Error,
					Summary = "There has been an error",
					Detail = errorMessage,
					Duration = 40000
				}
			);
			Console.Write("Error info:" + ex.Message);
		}
		finally
		{
			Console.Write("Done");
		}
	}
}
